const KEYWORDS = {
    BREAK: "break",
    CASE: "case",
    CATCH: "catch",
    CONST: "const",
    CONTINUE: "continue",
    DEBUGGER: "debugger",
    DEFAULT: "default",
    DELETE: "delete",
    DO: "do",
    ELSE: "else",
    ENUM: "enum",
    FALSE: "false",
    FINALLY: "finally",
    FOR: "for",
    FUNCTION: "function",
    IF: "if",
    IN: "in",
    INSTANCEOF: "instanceof",
    NEW: "new",
    NULL: "null",
    RETURN: "return",
    SWITCH: "switch",
    THIS: "this",
    THROW: "throw",
    TRUE: "true",
    TRY: "try",
    TYPEOF: "typeof",
    VAR: "var",
    VOID: "void",
    WHILE: "while",
    WITH: "with"
};

const SYMBOLS = {
    STRING_QUOTE: '"',
    ASSIGN_UNSIGNED_RIGHT_SHIFT: '>>>=',
    ASSIGN_RIGHT_SHIFT: '>>=',
    ASSIGN_LEFT_SHIFT: '<<=',
    ASSIGN_BITWISE_OR: '|=',
    ASSIGN_BITWISE_XOR: '^=',
    ASSIGN_BITWISE_AND: '&=',
    ASSIGN_PLUS: '+=',
    ASSIGN_MINUS: '-=',
    ASSIGN_MUL: '*=',
    ASSIGN_DIV: '/=',
    ASSIGN_MOD: '%=',
    SEMICOLON: ';',
    COMMA: ',',
    HOOK: '?',
    COLON: ':',
    OR: '||',
    AND: '&&',
    BITWISE_OR: '|',
    BITWISE_XOR: '^',
    BITWISE_AND: '&',
    STRICT_EQUAL: '===',
    EQUAL: '==',
    ASSIGN: '=',
    STRICT_NOT_EQUAL: '!==',
    NOT_EQUAL: '!=',
    LEFT_SHIFT: '<<',
    LESS_EQUAL: '<=',
    LESS_THAN: '<',
    UNSIGNED_RIGHT_SHIFT: '>>>',
    RIGHT_SHIFT: '>>',
    GREATER_EQUAL: '>=',
    GREATER_THAN: '>',
    INCREMENT: '++',
    DECREMENT: '--',
    PLUS: '+',
    MINUS: '-',
    MULTIPLY: '*',
    DIVISION: '/',
    MOD: '%',
    NOT: '!',
    BITWISE_NOT: '~',
    DOT: '.',
    LEFT_BRACKET: '[',
    RIGHT_BRACKET: ']',
    LEFT_CURLY: '{',
    RIGHT_CURLY: '}',
    LEFT_PARENTHESIS: '(',
    RIGHT_PARENTHESIS: ')',
    BACK_TICK: "`",
    NEW_LINE: "\n",
    TAB_SPACE: "\t",
    EMPTY_SPACE: " "
};
const LIST = {
    PUNCTUATIONS: [
        SYMBOLS.LEFT_BRACKET, SYMBOLS.RIGHT_BRACKET, SYMBOLS.LEFT_PARENTHESIS,
        SYMBOLS.RIGHT_PARENTHESIS, SYMBOLS.SEMICOLON, SYMBOLS.COMMA,
        SYMBOLS.LEFT_BRACKET, SYMBOLS.RIGHT_BRACKET, SYMBOLS.COLON, SYMBOLS.BACK_TICK, SYMBOLS.DOT
    ],
    OPERATORS: [
        SYMBOLS.PLUS, SYMBOLS.MINUS, SYMBOLS.MULTIPLY,
        SYMBOLS.DIVISION, SYMBOLS.MOD, SYMBOLS.LESS_THAN, SYMBOLS.INCREMENT, SYMBOLS.DECREMENT,
        SYMBOLS.GREATER_THAN, SYMBOLS.EQUAL, SYMBOLS.NOT,
        SYMBOLS.BITWISE_OR, SYMBOLS.BITWISE_AND, SYMBOLS.BITWISE_NOT,
        SYMBOLS.BITWISE_XOR, SYMBOLS.AND, SYMBOLS.ASSIGN, SYMBOLS.ASSIGN_BITWISE_AND,
        SYMBOLS.ASSIGN_BITWISE_OR, SYMBOLS.ASSIGN_BITWISE_XOR, SYMBOLS.ASSIGN_DIV, SYMBOLS.ASSIGN_LEFT_SHIFT,
        SYMBOLS.ASSIGN_MINUS, SYMBOLS.ASSIGN_MOD, SYMBOLS.ASSIGN_MUL, SYMBOLS.ASSIGN_PLUS, SYMBOLS.ASSIGN_RIGHT_SHIFT,
        SYMBOLS.ASSIGN_UNSIGNED_RIGHT_SHIFT, SYMBOLS.STRICT_EQUAL, SYMBOLS.STRICT_NOT_EQUAL, SYMBOLS.LESS_EQUAL, SYMBOLS.GREATER_EQUAL,
        SYMBOLS.HOOK, SYMBOLS.MOD, SYMBOLS.LEFT_SHIFT, SYMBOLS.RIGHT_SHIFT, SYMBOLS.OR
    ],
    WHITESPACES: [
        SYMBOLS.EMPTY_SPACE, SYMBOLS.TAB_SPACE, SYMBOLS.NEW_LINE,
    ],
    KEYWORDS: [
        KEYWORDS.BREAK, KEYWORDS.CASE, KEYWORDS.CATCH, KEYWORDS.CONST,
        KEYWORDS.CONTINUE, KEYWORDS.DEBUGGER, KEYWORDS.DEFAULT, KEYWORDS.DELETE,
        KEYWORDS.DO, KEYWORDS.ELSE, KEYWORDS.ENUM, KEYWORDS.FALSE,
        KEYWORDS.FINALLY, KEYWORDS.FOR, KEYWORDS.FUNCTION, KEYWORDS.IF,
        KEYWORDS.IN, KEYWORDS.INSTANCEOF, KEYWORDS.NEW, KEYWORDS.NULL,
        KEYWORDS.RETURN, KEYWORDS.SWITCH, KEYWORDS.THIS, KEYWORDS.THROW,
        KEYWORDS.TRUE, KEYWORDS.TRY, KEYWORDS.TYPEOF, KEYWORDS.VAR,
        KEYWORDS.VOID, KEYWORDS.WHILE, KEYWORDS.WITH
    ],
};

const REGEX = {
    fpRegExp: /^\d+\.\d*(?:[eE][-+]?\d+)?|^\d+(?:\.\d*)?[eE][-+]?\d+|^\.\d+(?:[eE][-+]?\d+)?/,
    reRegExp: /^\/((?:\\.|\[(?:\\.|[^\]])*\]|[^\/])+)\/([gimy]*)/,
    intRegExp: /^0[xX][\da-fA-F]+|^0[0-7]*|^\d+/,
    multiCommentRegExp: /^\/\*(.|[\r\n])*?\*\//m,
    commentRegExp: /^\/\/.*/,
    identRegExp: /^[$_\w]+/,
    wsRegExp: /^[\ \t]+/,
    strRegExp: /^'([^'\\]|\\.)*'|^"([^"\\]|\\.)*"/
};

const constants = {
    KW: KEYWORDS,
    SYM: SYMBOLS,
    LIST: LIST,
    REGEX: REGEX,
    KEYWORD: "keyword",
    VARIABLE: "variable",
    STRING: "string",
    ARRAY: "array",
    ARRAY_ELEM: "arrayElement",
    NUMBER: "number",
    PROGRAM: "program",
    PUNCTUATION: "punctuation",
    OPERATOR: "operator",
    EXP_PUNC: "expression_punctuations",
    YL_EXT: ".yl",
    NEGATE_EXPRESSION: "negate_exp",
};

module.exports = constants;